/**********************************************************************
 *  Linear Feedback Shift Register (part A) ps1a-readme.txt           *
 **********************************************************************/

Name: Meet Kothari
Hours to complete assignment: ~6.5 hours.

/**********************************************************************
Briefly discuss the assignment itself and what you accomplished.
**********************************************************************/

The main objective of this assignment was to build a LFSR with C++ and testing some given sample code with Boost Libraries. 
Throughout this process, I learned how to emulate the behavior of LSFR, something which was new to me. The step
function in general was difficult; I found it hard to return to the rightmost bit. The generate function, returning a k-bit integer
simulating k steps, was a tad easier to understand. In my mind, the bit would be doubled and then added to the bit returned from 
the step function. XOR was difficult for me to understand and implement, so I opted to not use an xor ^ for my step function- 
instead, I saved the result between two taps into a variable, and then tested if the other taps were equal to the variable.

/****************************************************************************************************
 *  Explain the representation you used for the register bits (how it works, and why you selected it)
 ***************************************************************************************************/

As I mentioned before, XOR was difficult for me to understand and implement, so I opted to not use an xor ^ for my step function- 
instead, I saved the result between two taps into a variable, and then tested if the other taps were equal to the variable. I split
the "taps" into 4 different segments, each corresponding to a byte. Then, I would read in the numbers from left to right, 
and then compared those two to each other. For example, in lieu of something like 0 xor 0 = 0, my function would fire off code 
to split that expression into two parts and compare them. Perhaps a cruder approach, but once I worked out the hiccups, it worked
fine. Another difficult part was matching the "byte" values to the 10, 12, 13, and 15 places of the diagram provided, but it took long enough and it was done.

 
/**********************************************************************
 * Discuss what's being tested in your two additional Boost unit tests*
**********************************************************************/

In my two additional boost tests, I'm testing different things each time. First, I use the Boost framework to
test the step function. I do so by using a random number and then using 3 taps. My program passed this test case.
The second test is a generate test, and there, again, I used a random number and tried to run the generate on some parts of it.
This worked as well.

/********************************************************************************************
 *  List whatever help (if any) you received from the instructor, classmates, or anyone else.
 *******************************************************************************************/

I had to look at a few videos on Makefiles, as I had forgotten how to make them. Another issue I had was 
with the bit representation, so I looked at a few StackOverflow questions and videos to gain a better understanding of 
what I was working with. 


/**********************************************************************
 *  Describe any serious problems you encountered.                    
 **********************************************************************/

My major, major problem was with my step function. As stated earlier, I tried to go a different round and not use 
the XOR because I am abysmal with it. The flip side, however, was that my system of cutting the bits up and comparing 
them was not working for hours. I wanted to have 4 bytes with 4 bits each, and then fit numbers into them for comparison purposes.
I kept failing the given tests, however, mainly due to my variable naming. I tried to name the "bytes" in order from 1-4, but the quickly
served to trip me up so I had to draw it all out before I could link it all together and get my program to pass the tests. Then I completely realized I was wrong
and made "byte" just a container, like a variable. From there, I had the logic figured out so it was not too bad. Other than
that, however, I was good.


/**********************************************************************
 *  List any other comments here.                                     
 **********************************************************************/

 None.
